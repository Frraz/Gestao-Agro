#!/usr/bin/env python3
"""
Script para testar e verificar o funcionamento do sistema de notifica√ß√µes
com workers Celery simulados.
"""

import sys
import os
from datetime import datetime, date, timedelta

# Adicionar o diret√≥rio raiz ao Python path
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

def test_worker_simulation():
    """Simula a execu√ß√£o das tasks como se fossem executadas pelo worker"""
    print("\n=== Simula√ß√£o de Execu√ß√£o do Worker Celery ===")
    
    try:
        # Configurar ambiente
        os.environ['FLASK_ENV'] = 'development'
        
        # Importar o app Flask
        from src.main import app, celery
        
        print("‚úì App Flask e Celery carregados")
        
        # Testar tasks individualmente
        with app.app_context():
            print("‚úì Contexto Flask ativo")
            
            # Listar todas as tasks registradas
            registered_tasks = [name for name in celery.tasks.keys() if not name.startswith('celery.')]
            print(f"\nüìã Tasks registradas ({len(registered_tasks)}):")
            for task_name in registered_tasks:
                print(f"  - {task_name}")
            
            # Tentar executar as principais tasks
            print("\nüîÑ Testando execu√ß√£o das tasks principais:")
            
            # 1. Testar task de documentos
            try:
                task_doc = celery.tasks.get('tasks.processar_notificacoes_documentos')
                if task_doc:
                    print("\n--- Executando task de documentos ---")
                    result = task_doc.apply().get()
                    print(f"‚úì Task documentos executada: {result}")
                else:
                    print("‚ö† Task de documentos n√£o encontrada")
            except Exception as e:
                print(f"‚úó Erro na task de documentos: {e}")
            
            # 2. Testar task de endividamentos
            try:
                task_end = celery.tasks.get('tasks.processar_notificacoes_endividamento')
                if task_end:
                    print("\n--- Executando task de endividamentos ---")
                    result = task_end.apply().get()
                    print(f"‚úì Task endividamentos executada: {result}")
                else:
                    print("‚ö† Task de endividamentos n√£o encontrada")
            except Exception as e:
                print(f"‚úó Erro na task de endividamentos: {e}")
            
            # 3. Testar task geral
            try:
                task_all = celery.tasks.get('tasks.processar_todas_notificacoes')
                if task_all:
                    print("\n--- Executando task de todas as notifica√ß√µes ---")
                    result = task_all.apply().get()
                    print(f"‚úì Task geral executada: {result}")
                else:
                    print("‚ö† Task geral n√£o encontrada")
            except Exception as e:
                print(f"‚úó Erro na task geral: {e}")
            
            # 4. Testar task de teste
            try:
                task_test = celery.tasks.get('tasks.test_notificacoes')
                if task_test:
                    print("\n--- Executando task de teste ---")
                    result = task_test.apply().get()
                    print(f"‚úì Task de teste executada: {result}")
                else:
                    print("‚ö† Task de teste n√£o encontrada")
            except Exception as e:
                print(f"‚úó Erro na task de teste: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erro na simula√ß√£o do worker: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_beat_schedule_validation():
    """Valida se a configura√ß√£o do beat est√° correta"""
    print("\n=== Valida√ß√£o da Configura√ß√£o do Beat ===")
    
    try:
        from celery_app import celery
        
        beat_schedule = celery.conf.beat_schedule
        registered_tasks = [name for name in celery.tasks.keys() if not name.startswith('celery.')]
        
        print(f"üìÖ Agendamentos configurados: {len(beat_schedule)}")
        
        validation_errors = []
        
        for schedule_name, config in beat_schedule.items():
            task_name = config['task']
            schedule = config['schedule']
            
            print(f"\nüîç Validando agendamento: {schedule_name}")
            print(f"   Task: {task_name}")
            print(f"   Schedule: {schedule}")
            
            # Verificar se a task existe
            if task_name in registered_tasks:
                print("   ‚úì Task encontrada")
            else:
                print("   ‚úó Task N√ÉO encontrada")
                validation_errors.append(f"Task '{task_name}' n√£o est√° registrada")
            
            # Verificar se a task pode ser executada
            try:
                task = celery.tasks.get(task_name)
                if task:
                    print("   ‚úì Task pode ser chamada")
                else:
                    print("   ‚úó Task n√£o pode ser obtida")
                    validation_errors.append(f"Task '{task_name}' n√£o pode ser obtida")
            except Exception as e:
                print(f"   ‚úó Erro ao obter task: {e}")
                validation_errors.append(f"Erro ao obter task '{task_name}': {e}")
        
        if validation_errors:
            print(f"\n‚ùå Encontrados {len(validation_errors)} erros de valida√ß√£o:")
            for error in validation_errors:
                print(f"   - {error}")
            return False
        else:
            print("\n‚úÖ Todas as valida√ß√µes passaram!")
            return True
            
    except Exception as e:
        print(f"‚úó Erro na valida√ß√£o do beat: {e}")
        import traceback
        traceback.print_exc()
        return False

def show_celery_commands():
    """Mostra os comandos para executar o Celery em produ√ß√£o"""
    print("\n=== Comandos para Execu√ß√£o em Produ√ß√£o ===")
    
    print("\nüì¶ Pr√©-requisitos:")
    print("1. Redis deve estar rodando:")
    print("   sudo apt-get install redis-server")
    print("   redis-server")
    print("")
    print("2. Instalar depend√™ncias:")
    print("   pip install -r requirements.txt")
    
    print("\nüöÄ Comandos para iniciar o sistema:")
    print("")
    print("1. Worker Celery (em um terminal):")
    print("   cd /path/to/project")
    print("   celery -A celery_app worker --loglevel=info")
    print("")
    print("2. Scheduler Celery Beat (em outro terminal):")
    print("   cd /path/to/project")
    print("   celery -A celery_app beat --loglevel=info")
    print("")
    print("3. Monitor Celery (opcional, em outro terminal):")
    print("   celery -A celery_app flower")
    print("")
    print("4. Aplica√ß√£o Flask (em outro terminal):")
    print("   cd /path/to/project")
    print("   python src/main.py")
    
    print("\nüìä Comandos de monitoramento:")
    print("")
    print("Ver status dos workers:")
    print("   celery -A celery_app status")
    print("")
    print("Ver tasks ativas:")
    print("   celery -A celery_app inspect active")
    print("")
    print("Ver agendamentos:")
    print("   celery -A celery_app inspect scheduled")
    print("")
    print("Executar task manualmente:")
    print("   celery -A celery_app call tasks.processar_todas_notificacoes")
    
    print("\nüîß Vari√°veis de ambiente necess√°rias (.env):")
    print("   REDIS_URL=redis://localhost:6379/0")
    print("   CELERY_BROKER_URL=redis://localhost:6379/0")
    print("   CELERY_RESULT_BACKEND=redis://localhost:6379/0")
    print("   MAIL_SERVER=smtp.gmail.com")
    print("   MAIL_USERNAME=seu_email@gmail.com")
    print("   MAIL_PASSWORD=sua_senha_app")
    print("   MAIL_DEFAULT_SENDER=seu_email@gmail.com")

def run_diagnostic():
    """Executa diagn√≥stico completo do sistema"""
    print("üîß DIAGN√ìSTICO DO SISTEMA DE NOTIFICA√á√ïES")
    print("=" * 60)
    print(f"Data/Hora: {datetime.now()}")
    print(f"Python: {sys.version}")
    print("")
    
    success = True
    
    # Teste b√°sico de importa√ß√µes
    print("1Ô∏è‚É£ Testando importa√ß√µes...")
    try:
        from src.utils.notificacao_documentos_service import NotificacaoDocumentoService
        from src.utils.notificacao_endividamento_service import NotificacaoEndividamentoService
        print("   ‚úì Servi√ßos de notifica√ß√£o importados")
    except Exception as e:
        print(f"   ‚úó Erro nas importa√ß√µes: {e}")
        success = False
    
    # Teste do Celery
    print("\n2Ô∏è‚É£ Testando configura√ß√£o do Celery...")
    try:
        from celery_app import celery
        print(f"   ‚úì Celery carregado")
        print(f"   ‚úì Broker: {celery.conf.broker_url}")
        print(f"   ‚úì Timezone: {celery.conf.timezone}")
        print(f"   ‚úì Tasks registradas: {len([t for t in celery.tasks.keys() if not t.startswith('celery.')])}")
    except Exception as e:
        print(f"   ‚úó Erro no Celery: {e}")
        success = False
    
    # Teste de simula√ß√£o
    print("\n3Ô∏è‚É£ Testando simula√ß√£o de worker...")
    success &= test_worker_simulation()
    
    # Valida√ß√£o do beat
    print("\n4Ô∏è‚É£ Validando configura√ß√£o do beat...")
    success &= test_beat_schedule_validation()
    
    # Mostrar comandos
    show_celery_commands()
    
    # Resultado final
    print("\n" + "=" * 60)
    if success:
        print("üéâ DIAGN√ìSTICO CONCLU√çDO COM SUCESSO!")
        print("\nO sistema est√° configurado corretamente.")
        print("Para colocar em produ√ß√£o, siga os comandos mostrados acima.")
    else:
        print("‚ùå DIAGN√ìSTICO ENCONTROU PROBLEMAS!")
        print("\nVerifique os erros acima antes de colocar em produ√ß√£o.")
    
    print("\nüí° Dica: Execute este script sempre que fizer altera√ß√µes no sistema de notifica√ß√µes.")
    
    return success

if __name__ == "__main__":
    run_diagnostic()